# If this file changes please update the server and run
#
#   crontab ~/rails-docs-server/config/crontab
#
# to install the new jobs.

SHELL=/bin/bash
BASH_ENV=~/.profile

*/1 * * * *  systemd-cat -t rails-master-hook ~/rails-docs-server/bin/rails_master_hook.sh

# The lock file is created and deleted by the master hook. That is a shell
# script so even if something crashes, the parent process will finish just fine.
# For some reason in October 2014 the lock file became stale. Maybe there was a
# reboot or something really unusual. This job ensures at most it is going to be
# stale for an hour.
@hourly test $(( `date +%s` - `stat --format %Y $LOCK_FILE` )) -ge 3600 && rm $LOCK_FILE

# This lock file is managed by the contrib app in a robust way, with deletion in
# an `ensure` clause. But, there was a day in which the disk got full and the lock
# file became stale.
@hourly test $(( `date +%s` - `stat --format %Y $CONTRIB_APP_LOCK_FILE` )) -ge 3600 && rm $CONTRIB_APP_LOCK_FILE

# The contrib app uses page caching for everything, this job is needed because
# there are some time-dependent listings that need to be expired regardless of
# whether there are new commits. Think the "Today" page for example.
@midnight ~/rails-docs-server/bin/expire_cached_pages.sh

# Mobi files take a lot of space and we generate edge guides for Kindle. We need
# to keep them under control or else the disk is going to be filled up.
@daily ~/rails-docs-server/bin/clean_edge_mobis.sh

# Git complains from time to time about unreachable objects. This job makes sure
# the repo is kept in good shape.
@daily cd ~/main && git prune && git gc
@daily cd ~/rails-contributors/shared/rails.git && git prune && git gc
